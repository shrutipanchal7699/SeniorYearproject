{"ast":null,"code":"import { PRODUCT_CREATE_FAIL, PRODUCT_CREATE_REQUEST, PRODUCT_CREATE_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS } from \"../constants/productConstants\";\nimport Axios from \"axios\";\nexport const listProducts = () => async dispatch => {\n  dispatch({\n    type: PRODUCT_LIST_REQUEST\n  });\n\n  try {\n    const currToken = localStorage.getItem(\"userToken\"); //console.log(currToken)\n\n    const {\n      data\n    } = await Axios.get('http://localhost:5000/products/', {\n      headers: {\n        'authorization': 'bearer '.concat(currToken)\n      }\n    }); //console.log(data)\n\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data.products\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n}; //GETTING PRODUCT ID FROM BACKEND AND UPDATE REDUX STORE.\n//instead of using productId --> using product_id\n\nexport const detailsProduct = product_id => async dispatch => {\n  dispatch({\n    type: PRODUCT_DETAILS_REQUEST,\n    payload: product_id\n  });\n\n  try {\n    // getting data from the backend api\n    // console.log(\"Finding product id\")\n    // console.log(product_id)\n    const {\n      data\n    } = await Axios.get(`http://localhost:5000/products/${product_id}`); //console.log(data)\n\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // export const createProduct = (productName, location, description, countInStock, price, image) => async (dispatch) =>  {\n//      dispatch({type: PRODUCT_CREATE_REQUEST, payload: {productName, location, description, countInStock, price, image}});\n//     try{\n//         //console.log(localStorage.setItem(\"productInfo\", JSON.stringify(data));     \n//         console.log(productName + \" \"+ location+ \" \"+ description + \" \"+ countInStock + \" \"+ price + \" \"+ image );\n//         const {data} = await Axios.post('http://localhost:5000/products/createProduct', {productName, location, description, countInStock, price});\n//         dispatch({type: PRODUCT_CREATE_SUCCESS, payload: data});\n//         localStorage.setItem(\"productInfo\", JSON.stringify(data));\n//     }\n//     catch(error){\n//         dispatch({ type: PRODUCT_CREATE_FAIL, \n//             payload:\n//             error.response && error.response.data.message\n//                         ? error.response.data.message\n//                         : error.message,\n//          });\n//     }\n// };\n\nexport const createProduct = (productName, location, description, countInStock, price, image) => async dispatch => {\n  dispatch({\n    type: PRODUCT_CREATE_REQUEST,\n    payload: {\n      productName,\n      location,\n      description,\n      countInStock,\n      price\n    }\n  });\n\n  try {\n    //console.log(localStorage.setItem(\"productInfo\", JSON.stringify(data));     \n    console.log(productName + \" \" + location + \" \" + description + \" \" + countInStock + \" \" + price + \" \" + image);\n    const currToken = localStorage.getItem(\"userToken\");\n    const {\n      data\n    } = await Axios.post('http://localhost:5000/products/createProduct', {\n      body: [{\n        \"name\": productName,\n        \"location\": location,\n        \"description\": description,\n        \"quantity\": countInStock,\n        \"price\": price\n      }]\n    }, {\n      headers: {\n        'authorization': 'bearer '.concat(currToken)\n      }\n    });\n    dispatch({\n      type: PRODUCT_CREATE_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"productInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/param/Desktop/marketplace/final/frontend/src/actions/productActions.js"],"names":["PRODUCT_CREATE_FAIL","PRODUCT_CREATE_REQUEST","PRODUCT_CREATE_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","Axios","listProducts","dispatch","type","currToken","localStorage","getItem","data","get","headers","concat","payload","products","error","message","detailsProduct","product_id","response","createProduct","productName","location","description","countInStock","price","image","console","log","post","body","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import {PRODUCT_CREATE_FAIL, PRODUCT_CREATE_REQUEST, PRODUCT_CREATE_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS } from \"../constants/productConstants\"\nimport Axios from \"axios\";\n\nexport const listProducts = () => async (dispatch) => {\n    dispatch({\n        type: PRODUCT_LIST_REQUEST,\n    });\n\n    try{\n        const currToken = localStorage.getItem(\"userToken\");\n         //console.log(currToken)\n        const { data } = await Axios.get('http://localhost:5000/products/',\n        {\n            headers: {\n                'authorization' : 'bearer '.concat(currToken) ,\n            }\n        });\n        //console.log(data)\n        dispatch({type: PRODUCT_LIST_SUCCESS, payload: data.products});\n\n    } catch(error){\n        dispatch({type: PRODUCT_LIST_FAIL, payload: error.message});\n    }\n};\n\n\n//GETTING PRODUCT ID FROM BACKEND AND UPDATE REDUX STORE.\n//instead of using productId --> using product_id\nexport const detailsProduct = (product_id) => async(dispatch)=>{\n    dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: product_id});\n    try{\n        // getting data from the backend api\n        // console.log(\"Finding product id\")\n        // console.log(product_id)\n        const{ data } = await Axios.get(`http://localhost:5000/products/${product_id}`);\n        //console.log(data)\n        dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data});\n    }catch(error){\n        dispatch({\n            type: PRODUCT_DETAILS_FAIL,\n            payload: \n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message,\n        });\n    }\n};\n\n// export const createProduct = (productName, location, description, countInStock, price, image) => async (dispatch) =>  {\n//      dispatch({type: PRODUCT_CREATE_REQUEST, payload: {productName, location, description, countInStock, price, image}});\n//     try{\n//         //console.log(localStorage.setItem(\"productInfo\", JSON.stringify(data));     \n//         console.log(productName + \" \"+ location+ \" \"+ description + \" \"+ countInStock + \" \"+ price + \" \"+ image );\n//         const {data} = await Axios.post('http://localhost:5000/products/createProduct', {productName, location, description, countInStock, price});\n//         dispatch({type: PRODUCT_CREATE_SUCCESS, payload: data});\n\n//         localStorage.setItem(\"productInfo\", JSON.stringify(data));\n           \n//     }\n//     catch(error){\n//         dispatch({ type: PRODUCT_CREATE_FAIL, \n//             payload:\n//             error.response && error.response.data.message\n//                         ? error.response.data.message\n//                         : error.message,\n//          });\n//     }\n// };\n\nexport const createProduct = (productName, location, description, countInStock, price, image) => async (dispatch) =>  {\n    dispatch({type: PRODUCT_CREATE_REQUEST, payload: {productName, location, description, countInStock, price}});\n   try{\n       //console.log(localStorage.setItem(\"productInfo\", JSON.stringify(data));     \n       console.log(productName + \" \"+ location+ \" \"+ description + \" \"+ countInStock + \" \"+ price + \" \"+ image );\n       const currToken = localStorage.getItem(\"userToken\");\n       const {data} = await Axios.post('http://localhost:5000/products/createProduct', \n       {\n        body: [{\"name\" : productName,\n       \"location\": location,\n       \"description\": description,\n       \"quantity\": countInStock,\n       \"price\":price}]\n       \n   },{headers: {\n                'authorization' : 'bearer '.concat(currToken) ,\n            }});\n       dispatch({type: PRODUCT_CREATE_SUCCESS, payload: data});\n\n       localStorage.setItem(\"productInfo\", JSON.stringify(data));\n          \n   }\n   catch(error){\n       dispatch({ type: PRODUCT_CREATE_FAIL, \n           payload:\n           error.response && error.response.data.message\n                       ? error.response.data.message\n                       : error.message,\n        });\n   }\n};\n\n"]},"metadata":{},"sourceType":"module"}